//Задание 2. Создать класс Triangle, содержащий следующие члены класса:
//1. Поля:
//• int a, b, c;
//2. Конструктор, позволяющий создать экземпляр класса с заданными длинами сторон.
//3. Методы, позволяющие:
//• вывести длины сторон треугольника на экран;
//• расчитать периметр треугольника;
//• расчитать площадь треугольника.
//4. Свойство:
//• позволяющее получить-установить длины сторон треугольника(доступное для чтения
//и записи);
//• позволяющее установить, существует ли треугольник с данными длинами сторон
//(доступное только для чтения).
//5. Индексатор, позволяющий по индексу 0 обращаться к полю a, по индексу 1 – к полю b,
//по индексу 2 – к полю c, при других значениях индекса выдается сообщение об ошибке.
//6. Перегрузку:
//• операции ++ (--): одновременно увеличивает(уменьшает) значение полей a, b и c на 1;
//• констант true и false: обращение к экземпляру класса дает значение true, если
//треугольник с заданными длинами сторон существует, иначе false;
//• операции*: одновременно домножает поля a, b и c на скаляр.
//Продемонстрировать работу класса. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace practicum17
{
    class Triangle
    {
        private int a, b, c;

        public Triangle(int sideA, int sideB, int sideC)
        {
            a = sideA;
            b = sideB;
            c = sideC;
        }

        public void PrintSides()
        {
            Console.WriteLine($"Side a: {a}, Side b: {b}, Side c: {c}");
        }

        public int CalculatePerimeter()
        {
            return a + b + c;
        }

        public double CalculateArea()
        {
            double s = CalculatePerimeter() / 2.0;
            return Math.Sqrt(s * (s - a) * (s - b) * (s - c));
        }

        public int SideA
        {
            get { return a; }
            set { a = value; }
        }

        public int SideB
        {
            get { return b; }
            set { b = value; }
        }

        public int SideC
        {
            get { return c; }
            set { c = value; }
        }

        public bool Exists
        {
            get { return a + b > c && a + c > b && b + c > a; }
        }

        public int this[int index]
        {
            get
            {
                if (index == 0)
                    return a;
                else if (index == 1)
                    return b;
                else if (index == 2)
                    return c;
                else
                    throw new IndexOutOfRangeException("Index out of range");
            }
        }

        public static Triangle operator ++(Triangle triangle)
        {
            triangle.a++;
            triangle.b++;
            triangle.c++;
            return triangle;
        }

        public static Triangle operator --(Triangle triangle)
        {
            triangle.a--;
            triangle.b--;
            triangle.c--;
            return triangle;
        }

        public static bool operator true(Triangle triangle)
        {
            return triangle.Exists;
        }

        public static bool operator false(Triangle triangle)
        {
            return !triangle.Exists;
        }

        public static Triangle operator *(Triangle triangle, int scalar)
        {
            triangle.a *= scalar;
            triangle.b *= scalar;
            triangle.c *= scalar;
            return triangle;
        }
    }

    class Program
    {
        static void Main()
        {
            Triangle triangle = new Triangle(3, 4, 5);

            triangle.PrintSides();
            Console.WriteLine($"Perimeter: {triangle.CalculatePerimeter()}");
            Console.WriteLine($"Area: {triangle.CalculateArea()}");

            triangle.SideA = 5;
            Console.WriteLine($"Side A: {triangle.SideA}");

            Console.WriteLine($"Triangle exists: {triangle.Exists}");

            Console.WriteLine($"Index 0: {triangle[0]}");

            ++triangle;
            Console.WriteLine("After increment:");
            triangle.PrintSides();

            if (triangle)
                Console.WriteLine("Triangle exists");
            else
                Console.WriteLine("Triangle does not exist");

            triangle *= 2;
            Console.WriteLine("After multiplication:");
            triangle.PrintSides();
        }
    }
}
